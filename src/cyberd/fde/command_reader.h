#ifndef COMMAND_READER_H
#define COMMAND_READER_H

#include "../commands.h"

/**
 * This enum is used like an automaton to recognize
 * a command as described in IPCTL.md
 */
enum command_reader {
	COMMAND_READER_START,
	COMMAND_READER_CREATE_CONTROLLER = COMMAND_CREATE_CONTROLLER,
	COMMAND_READER_DAEMON_START = COMMAND_DAEMON_START,
	COMMAND_READER_DAEMON_STOP = COMMAND_DAEMON_STOP,
	COMMAND_READER_DAEMON_RELOAD = COMMAND_DAEMON_RELOAD,
	COMMAND_READER_DAEMON_END = COMMAND_DAEMON_END,
	COMMAND_READER_SYSTEM_POWEROFF = COMMAND_SYSTEM_POWEROFF,
	COMMAND_READER_SYSTEM_HALT = COMMAND_SYSTEM_HALT,
	COMMAND_READER_SYSTEM_REBOOT = COMMAND_SYSTEM_REBOOT,
	COMMAND_READER_SYSTEM_SUSPEND = COMMAND_SYSTEM_SUSPEND,
	COMMAND_READER_D,
	COMMAND_READER_DS,
	COMMAND_READER_DST,
	COMMAND_READER_DR,
	COMMAND_READER_DRL,
	COMMAND_READER_DE,
	COMMAND_READER_DEN,
	COMMAND_READER_S,
	COMMAND_READER_SP,
	COMMAND_READER_SPW,
	COMMAND_READER_SH,
	COMMAND_READER_SHL,
	COMMAND_READER_SR,
	COMMAND_READER_SRB,
	COMMAND_READER_SS,
	COMMAND_READER_SSS,
	COMMAND_READER_C,
	COMMAND_READER_CC,
	COMMAND_READER_CCT,
	COMMAND_READER_DISCARDING
};

/**
 * This function is used to change the state of the automaton
 * @param current Current state of the automaton
 * @param c New character determining the next state
 * @return New state
 */
enum command_reader
command_reader_next(enum command_reader current, char c);

/* COMMAND_READER_H */
#endif
