#!/bin/sh

while getopts hrd opt
do
	case $opt in
	h) cat <<EOF
\`configure' configures this package to adapt to many kinds of systems.

Usage: ./configure [-h] [-r|-d] [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h               display this help and exit

Optional Features:
  -d               configure a debug build (default)
  -r               configure a release build

Some influential environment variables:
  BINARIES         where binary executables are built.
  LIBRARIES        where libraries are built.
  OBJECTS          where intermediate object files are built.
  MKDIR            tool used to create objects subdirectories.
  LDFLAGS          arguments to pass to the linker.
  CC               C compiler to use, default [clang gcc tcc cc].
  CFLAGS           C compiler flags [-O -Wall -fPIC -DNDEBUG -Iinclude] when -r specified, [-g -Wall -fPIC -Iinclude] else.
  CYBERCTLFLAGS
  CYBERDFLAGS

Use these variables to override the choices made by \`configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.
EOF
		exit 1 ;;
	r) NDEBUG="${opt}" ;;
	d) unset NDEBUG ;;
	?) echo "Unknown option: ${opt}" ;;
	esac
done

shift $((OPTIND - 1))
[ ! -z "$*" ] && export -- "$@"

if [ -z "${CC}" ]
then
	for CC in clang gcc tcc cc
	do command -v "${CC}" && break
	done
fi

if [ ! -z "${CC}" ]
then printf "Using C compiler '%s'\n" "${CC}"
else printf 'Unable to find C compiler\n' ; exit 1
fi

if [ -z "${CFLAGS}" ]
then
	if [ -z "${NDEBUG}" ]
	then CFLAGS='-g -Wall -fPIC -Iinclude'
	else CFLAGS='-O -Wall -fPIC -DNDEBUG -Iinclude'
	fi
fi
printf "Using C compiler flags '%s'\n" "${CFLAGS}"

if [ -z "${MKDIR}" ]
then
	for MKDIR in mkdir
	do command -v "${MKDIR}" && break
	done
fi

if [ ! -z "${MKDIR}" ]
then printf "Using mkdir '%s'\n" "${MKDIR}"
else printf 'Unable to find mkdir\n' ; exit 1
fi

[ -z "${CYBERCTLFLAGS}" ] && CYBERCTLFLAGS=""
[ -z "${CYBERDFLAGS}" ] && CYBERDFLAGS=""

[ -z "${BINARIES}" ] && BINARIES="build/bin"
[ -z "${LIBRARIES}" ] && LIBRARIES="build/lib"
[ -z "${OBJECTS}" ] && OBJECTS="build/objects"
mkdir -p "${BINARIES}" "${LIBRARIES}" "${OBJECTS}"

[ -z "${CONFIG_DAEMONCONFS_DIRECTORY}" ] && CONFIG_DAEMONCONFS_DIRECTORY='/etc/daemons'
[ -z "${CONFIG_ENDPOINTS_DIRECTORY}" ] && CONFIG_ENDPOINTS_DIRECTORY='/var/run/init'
[ -z "${CONFIG_ENDPOINT_ROOT}" ] && CONFIG_ENDPOINT_ROOT='initctl'
[ -z "${CONFIG_DEFAULT_UMASK}" ] && CONFIG_DEFAULT_UMASK='022'
[ -z "${CONFIG_CONNECTIONS_LIMIT}" ] && CONFIG_CONNECTIONS_LIMIT='64'
[ -z "${CONFIG_READ_BUFFER_SIZE}" ] && CONFIG_READ_BUFFER_SIZE='512'
[ -z "${CONFIG_NAME_BUFFER_DEFAULT_CAPACITY}" ] && CONFIG_NAME_BUFFER_DEFAULT_CAPACITY='128'

sed \
	-e "s/@CONFIG_DAEMONCONFS_DIRECTORY@/${CONFIG_DAEMONCONFS_DIRECTORY//'/'/'\/'}/" \
	-e "s/@CONFIG_ENDPOINTS_DIRECTORY@/${CONFIG_ENDPOINTS_DIRECTORY//'/'/'\/'}/" \
	-e "s/@CONFIG_ENDPOINT_ROOT@/${CONFIG_ENDPOINT_ROOT}/" \
	-e "s/@CONFIG_DEFAULT_UMASK@/${CONFIG_DEFAULT_UMASK}/" \
	-e "s/@CONFIG_CONNECTIONS_LIMIT@/${CONFIG_CONNECTIONS_LIMIT}/" \
	-e "s/@CONFIG_READ_BUFFER_SIZE@/${CONFIG_READ_BUFFER_SIZE}/" \
	-e "s/@CONFIG_NAME_BUFFER_DEFAULT_CAPACITY@/${CONFIG_NAME_BUFFER_DEFAULT_CAPACITY}/" \
	include/config.h.in > include/config.h

cat - Makefile.rules <<EOF > Makefile
BINARIES=${BINARIES}
LIBRARIES=${LIBRARIES}
OBJECTS=${OBJECTS}

MKDIR=${MKDIR}
LDFLAGS=${LDFLAGS}
CC=${CC}
CFLAGS=${CFLAGS} -Iinclude

CYBERCTLFLAGS=${CYBERCTLFLAGS}
CYBERDFLAGS=${CYBERDFLAGS}

EOF
